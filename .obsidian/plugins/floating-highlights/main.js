/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => FloatHighlightsPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var FloatHighlightsPlugin = class extends import_obsidian.Plugin {
  onload() {
    console.log("loading plugin");
    const highlightObserver = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        var _a, _b;
        if (entry.isIntersecting) {
          (_a = entry.target.parentElement) == null ? void 0 : _a.classList.add("float-highlights");
        } else {
          (_b = entry.target.parentElement) == null ? void 0 : _b.classList.remove("float-highlights");
        }
      });
    }, { threshold: 0.2 });
    this.registerMarkdownPostProcessor((element) => {
      const highlightElements = element.querySelectorAll("mark");
      if (highlightElements) {
        Array.from(highlightElements).forEach((el) => {
          highlightObserver.observe(el);
        });
      }
    });
  }
  onunload() {
    console.log("Unloading plugin");
  }
};
